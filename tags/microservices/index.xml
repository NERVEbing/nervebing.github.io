<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Microservices on Lv&#39;s Playground</title>
    <link>https://lvlv.fun/tags/microservices/</link>
    <description>Recent content in Microservices on Lv&#39;s Playground</description>
    <image>
      <url>https://lvlv.fun/apple-touch-icon.png</url>
      <link>https://lvlv.fun/apple-touch-icon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 May 2022 02:25:11 +0800</lastBuildDate><atom:link href="https://lvlv.fun/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Rust 构建 gRPC 微服务</title>
      <link>https://lvlv.fun/posts/2022-05-30/</link>
      <pubDate>Mon, 30 May 2022 02:25:11 +0800</pubDate>
      
      <guid>https://lvlv.fun/posts/2022-05-30/</guid>
      <description>前言 当前越来越多的公司基于 Google gRPC 通信框架来构建微服务体系，比较流行的是使用 Go/Java/C++ 这样的主流编程语言来编写服务端，我们今天来尝试使用 Rust 语言来实现一个 gRPC 服务端/客户端。
打开官方文档可以看到目前 Rust 并不在 gRPC 官方支持的语言列表中：
 Supported languages
 C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby   不过不用担心这个问题。我们知道只要某个语言兼容了基于 C/C++ 编写的 gRPC 的核心库，那么该语言就可以完美支持 gRPC。目前 Rust 可以实现 gRPC 的主流 crate 如下：
 tonic grpc-rs grpc-rust  以上三种任选其一都可以，只是 grpc-rs/grpc-rust 当前还处于开发状态，我们在这里使用 tonic 包。
构建程序 首先检查你的 Rust 版本：
$ rustc --version rustc 1.61.0 (fe5b13d68 2022-05-18) tonic 适用于 1.56 及以上，如果低于这个版本，你应该先更新你的 Rust 编译器：</description>
    </item>
    
  </channel>
</rss>
