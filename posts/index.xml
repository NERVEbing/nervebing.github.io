<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Lv&#39;s Playground</title>
    <link>https://lvlv.fun/posts/</link>
    <description>Recent content in Posts on Lv&#39;s Playground</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 May 2022 02:25:11 +0800</lastBuildDate>
    <atom:link href="https://lvlv.fun/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用 Rust 构建 gRPC 微服务</title>
      <link>https://lvlv.fun/posts/2022-05-30/</link>
      <pubDate>Mon, 30 May 2022 02:25:11 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2022-05-30/</guid>
      <description>前言 当前越来越多的公司基于 Google gRPC 通信框架来构建微服务体系，比较流行的是使用 Go/Java/C++ 这样的主流编程语言来编写服务端，我们今天来尝试使用 Rust 语言来实现一个 gRPC 服务端/客户端。
打开官方文档可以看到目前 Rust 并不在 gRPC 官方支持的语言列表中：
Supported languages
C# C++ Dart Go Java Kotlin Node Objective-C PHP Python Ruby 不过不用担心这个问题。我们知道只要某个语言兼容了基于 C/C++ 编写的 gRPC 的核心库 ，那么该语言就可以完美支持 gRPC。目前 Rust 可以实现 gRPC 的主流 crate 如下：
tonic grpc-rs grpc-rust 以上三种任选其一都可以，只是 grpc-rs/grpc-rust 当前还处于开发状态，我们在这里使用 tonic 包。
构建程序 首先检查你的 Rust 版本：
$ rustc --version rustc 1.61.0 (fe5b13d68 2022-05-18) tonic 适用于 1.56 及以上，如果低于这个版本，你应该先更新你的 Rust 编译器：
$ rustup update stable 确保你已经提前安装了 protobuf：</description>
    </item>
    <item>
      <title>JavaScript 批量删除 Bilibili 动态</title>
      <link>https://lvlv.fun/posts/2022-05-21/</link>
      <pubDate>Sat, 21 May 2022 00:36:37 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2022-05-21/</guid>
      <description>Step 1 登录 Bilibili，点击自己的头像进入个人空间页，点击动态标签。
此时的 URL 应该是 https://space.bilibili.com/{YOUR_UID}/dynamic。
Step 2 打开 Chrome 浏览器，按 F12 或手动右键页面，点击检查，切换到控制台标签。
不支持 Safari。
Step 3 鼠标移到右上头像，记下当前动态数。
复制以下代码到 Console 并回车执行，等待 1s，页面应该会自动刷新。
再次查看右上头像当前动态数，如发现动态数量减少，按方向键上重新调出代码并回车执行，之后复读操作即可。
const delBtnElement = &amp;#39;#page-dynamic &amp;gt; div.col-1 &amp;gt; div &amp;gt; div.bili-dyn-list__items &amp;gt; div &amp;gt; div &amp;gt; div &amp;gt; div.bili-dyn-item__header &amp;gt; div.bili-dyn-item__more &amp;gt; div &amp;gt; div &amp;gt; div.bili-dyn-more__menu &amp;gt; div:nth-child(2)&amp;#39; const confirmBtnEliment = &amp;#39;body &amp;gt; div.bili-modal__wrap &amp;gt; div.bili-modal &amp;gt; div.bili-modal__footer &amp;gt; button.bili-modal__button.confirm&amp;#39; var elements = $(delBtnElement); if (elements.</description>
    </item>
    <item>
      <title>基于 HPE MicroServer Gen10 Plus 的 HomeLab 搭建 - 硬件篇</title>
      <link>https://lvlv.fun/posts/2022-05-08/</link>
      <pubDate>Sun, 08 May 2022 11:09:36 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2022-05-08/</guid>
      <description>前言 声明 本文是个人对 HomeLab 即家庭私有实验室的学习探索，参杂着一些经验总结，记录下来，也希望可以让他人少走一些弯路。
HomeLab 是什么？ 本质上是一个连接各种设备的复杂系统，你可以用任何树莓派/PC/服务器/路由器组成一个 HomeLab。
HomeLab 能做什么？ 搭建属于私人的网盘，不必在各个设备上安装云盘 App 才能上传/下载文件 不受版权控制的家庭多媒体，集成影视订阅，实现观影追剧自由 集成 HomeBridge 以实现在 iOS/macOS 的 Home.app 中操作非 HomeKit 认证的设备 BT 下载器，无需开启个人电脑，后台下载资源 RSS 订阅器，抛弃无意义地刷手机，只获取自己想要的内容 bilibili/京东每日任务，各种脚本反薅资本家的羊毛 最重要的是你可以搭建包括但不限于 K8S/ELK/MySQL/Redis/Prometheus 等各种服务，也可以在上面跑 CI/CD 自动化构建发布你的代码 阅读门槛 基本的网络知识，比如光猫和路由器的区别，交换机的作用是什么 基本的 Linux 操作，可以理解计算机不是一定要连接显示器才可以操作 遇到问题先使用英文进行 Google，内容过长可以开启页面翻译，请不要看 CSDN 的内容 不求甚解，当你发现你让它跑起来了的时候，会获得极大的心理满足感 设备 架构说明 主要分为服务器和网络设备。考虑到网络设备的稳定性及网络隔离对整套系统的重要程度，没有采用虚拟化 AIO(ALL IN ONE) 方案。
作为服务端开发者看来所谓的 AIO 毫无稳定性可言，ESXi 的 OpenWrt 虚拟机出了故障会影响其他业务虚拟机的运行，甚至连 iLO 后台都进不去，需要连接显示器手动配置 ESXi 进行修复，这种情况在异地操作 HomeLab 节点的时候是毁灭性的灾难。
当然这种方式的好处也有：网络上的 教程 较多，按视频操作一步步做几乎没有难点，小白也能轻松搭建。
缺点就是对整体的 HomeLab 环境一知半解甚至根本不懂，只会复制粘贴。当然你可以说“我只是想快速搭建一整套服务，不想了解细节”，这样的话本文可能不适合你。
服务器 首先是最重要的服务器部分，绝大多数设备购入时间为 2021 年 2-3 月，价格相比当前可能有很大差距，费用清单如下：</description>
    </item>
    <item>
      <title>MySQL/innoDB 内部实现</title>
      <link>https://lvlv.fun/posts/2019-10-29/</link>
      <pubDate>Tue, 29 Oct 2019 19:12:30 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2019-10-29/</guid>
      <description>MySQL 存储结构 B-tree 是平衡的多路查找树。 涉及到磁盘的查找需要设法减少磁盘 I/O 次数。 B-tree 就是为解决这个问题而引入的数据结构。 区别于二叉树 b-tree 可以拥有很多个子节点（这个度量被称为「内结点出度」) 我们可以在技术上使 B-tree 的结点大小为磁盘一个页的大小，并且在新建结点时直接申请一个页大小的空间，使得结点的物理存储位置也是在一个页里，这样就能实现存取一个结点只需一次磁盘 I/O 在最坏情况下，B-tree 的一次检索最多需要 H（树的高度）次的磁盘 I/O 实际上，为了取得更大的内结点出度，各个数据库一般会采用 B-tree 的变种如 B+-tree，B*-tree 来实现索引，比如 MySQL 的存储引擎 InnoDB 就采用 B+-tree 来实现聚簇索引 索引 字符串索引，长度限制 innodb 存储引擎，默认前缀长度最大能支持 767 字节；而在开启 innodb_large_prefix 属性值的情况下，最大能支持 3072 字节 前缀索引，后缀索引，手动 md5 哈希索引 innode 内置哈希 Cardinality 不重复值预估，除以记录总数的比例 尽量接近 1 索引的价值越大 查询优化器 选择索引时会考虑这个值 oltp olap Online Analytical Processing Online transaction processing 索引细节 单列索引币复合索引在每个数据页存的记录要多，所以查询优化器优先使用单列索引 覆盖索引 数据最小读取单位 (索引页？) count(*) 操作，实际会读取辅助索引，避免读取聚合索引 统计操作，覆盖索引的情况下，可以直接查询复合索引 (a,b) 中的 b index hint 索引提示 use index 只是提示，force index 才是强制 multi-range read 优化 从辅助索引筛选完之后，将结果，已主键进行排序，再去读聚合索引下的记录行 index condition pushdown（IPC）优化，将 where 过滤条件推送到存储引擎，减少数据传输 (使用时会提示 using index condition) innodb 全文索引 使用倒排索引实现，使用了 FTS Index Cache 缓存数据变更，批量更新到 Auxiliary Table 中 ( 这个表可以通过关键词定位到文档，单词位置) 锁 myisam 只支持表锁，sql server 2005 版之前只支持页锁，2005 开始支持行锁，但是实现方式与 innodb 不同，加锁会有资源开销，innodb 则与 oracle 的锁实现类似</description>
    </item>
    <item>
      <title>gRPC Connection reset by peer 问题</title>
      <link>https://lvlv.fun/posts/2019-07-22/</link>
      <pubDate>Mon, 22 Jul 2019 12:40:20 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2019-07-22/</guid>
      <description>前提 因产品需求，需用 PHP（v7.0.12）调用 k8s 集群中 gRPC（golang@1.12.0）服务。
问题 经过 dev 环境测试，当 php-fpm 启动后第一次调用或者距离上次调用时间 20 分钟后左右，再次请求 gRPC 微服务接口，就会返回 Connection reset by peer 错误，说明 gRPC 服务端或者客户端主动关闭连接了。继续发起请求到服务端，又恢复正常。
思考 经查阅相关资料，发现问题可能出现在 k8s 集群的 kube-proxy 模式上。当前 k8s 环境 (dev) 下的 kube-proxy 为 ipvs 模式，服务端与客户端之间通信如下：
把上图 client 看成是 apsopen-inside 服务 pod，Backend pod(1~3) 看成 gRPC 服务，可以看出它们之间的交互路径：
---&amp;gt; gRPC server pod1 gRPC-client ---&amp;gt; ipvs ---&amp;gt; gRPC server pod3 ---&amp;gt; gRPC server pod3 我们知道gRPC是基于HTTP/2协议的，gRPC的client和server在交互时会建立多条连接，为了性能，这些连接都是长连接并且是一直保活的。这段环境中不管是客户端服务还是 gRPC 服务都被调度到各个相同配置信息的 Kubernetes 节点上，这些 k8s 节点的 keep-alive 是一致的，如果出现连接主动关闭的问题，因为从 client 到 server 经历了一层 ipvs，所以最大的可能就是 ipvs 出将连接主动断开，而 client 端还不知情。 搜索 ipvs timeout 关键字找到了下面相关的链接：</description>
    </item>
    <item>
      <title>gRPC error code</title>
      <link>https://lvlv.fun/posts/2019-06-12/</link>
      <pubDate>Wed, 12 Jun 2019 20:04:20 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2019-06-12/</guid>
      <description>RPC.response.status.code HTTP RPC Description 0 - OK 200 OK Not an error; returned on success. 1 - CANCELLED 499 Client Closed Request The operation was cancelled, typically by the caller. 2 - UNKNOWN 500 Internal Server Error Unknown error. For example, this error may be returned when a Status value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.</description>
    </item>
    <item>
      <title>Protobuf 总结</title>
      <link>https://lvlv.fun/posts/2019-03-14/</link>
      <pubDate>Thu, 14 Mar 2019 11:18:20 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2019-03-14/</guid>
      <description>Protobuf 是什么 Protobuf 是一种平台无关、语言无关、可扩展且轻便高效的序列化数据结构的协议，可以用于通信协议和数据存储等。 传输协议 - 如 json、XML IDL - 接口描述语言 存储格式 - 序列化压缩后存储到数据库 核心竞争力 向前向后兼容性 - 新老版本兼容，无需考虑版本升级 多语言代码生成 - 支持 Java、Python、PHP、Go 等编程语言 快&amp;amp;小 - 序列化、反序列化速度快，压缩比优秀 关键技术 varints 编码 每个字节使用其中 7 位保存数字，最高位表示后面是否还有内容 低位在前，高位在后 保留了fixed32和fixed64，用于传递大的正数 int32、int64、unit32、uint64、bool，序列化结果相互兼容，可以修改 zigzag 编码 传统上，负数最高位为 1，小负数会浪费编码长度 (n&amp;lt;&amp;lt;1)^(n&amp;gt;&amp;gt;31) -1 将会被编码成 1，1 将会编码成 2，-2 将会被编码成 3 sint32和sint64使用 zigzag 编码 message structure 编码 Tag-Value 编码 Tag=(field_number&amp;lt;&amp;lt;3)|wire_type-&amp;gt;varints wire_type:0 表示 varints，1 表示固定 64 位，5 表示固定 32 位 wire_type:2 表示 Tag-Length-Value 编码（TLV），Length 使用 varints string、bytes、message 嵌套，都采用 TLV 编码 wire_type 只有 0、1、2、5，那么 3 和 4 去哪了？—被废除了</description>
    </item>
    <item>
      <title>Learning go from zero to hero - Part 2</title>
      <link>https://lvlv.fun/posts/2018-12-28/</link>
      <pubDate>Fri, 28 Dec 2018 13:34:06 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2018-12-28/</guid>
      <description>作者：Milap Neupane
链接：https://medium.freecodecamp.org/learning-go-from-zero-to-hero-d2a3223b3d86
函数 main.go包中定义的func main()是执行程序的入口。可以定义和使用更多函数。让我们看一个简单的例子：
func add(a int, b int) int { c := a + b return c } func main() { fmt.Println(add(2, 1)) } // 3 正如我们在上面的例子中所看到的，使用**func关键字后跟函数名来定义 Go 函数。函数所需的参数**需要根据其数据类型定义，最后是返回的数据类型。
函数的返回也可以在函数中预定义：
func add(a int, b int) (c int) { c = a + b return } func main() { fmt.Println(add(2, 1)) } // 3 这里 c 被定义为返回变量。因此，定义的变量 c 将自动返回，而无需在结尾的 return 语句中定义。
还可以从单个函数返回多个返回值，将返回值与逗号分隔开。
func add(a int, b int) (int, string) { c := a + b return c, &amp;#34;successfully added&amp;#34; } func main() { sum, message := add(2, 1) fmt.</description>
    </item>
    <item>
      <title>Learning go from zero to hero - Part 1</title>
      <link>https://lvlv.fun/posts/2018-12-22/</link>
      <pubDate>Sat, 22 Dec 2018 18:47:53 +0800</pubDate>
      <guid>https://lvlv.fun/posts/2018-12-22/</guid>
      <description>作者：Milap Neupane
链接：https://medium.freecodecamp.org/learning-go-from-zero-to-hero-d2a3223b3d86
开始 想到刚开始学习 Go 的时候，也是不清不楚地本着拿来能用就行的心态，没有系统学习，导致学习过程中踩坑无数。今天发现一篇文章写的很好，Go 语言的特征讲得很细，翻译给需要的初学 Go 的同学。
前言 让我们从 Go（或者称为 Golang）的一个小介绍开始。Go 由 Google 工程师 Robert Griesemer，Rob Pike 和 Ken Thompson 设计。它是一种静态类型的编译语言。第一个版本于 2012 年 3 月作为开源发布。
“Go 是一种开源编程语言，可以轻松构建简单，可靠，高效的软件”
在许多语言中，有许多方法可以解决给定的问题。程序员可以花很多时间思考解决问题的最佳方法。
另一方面，Go 相信更少的功能 — 只有一种正确的方法来解决问题。
这节省了开发人员的时间，并使大型代码库易于维护。
“功能越多，成本越高” — Rob Pike
入门 Go 由package组成。名为main的包告诉 Go 编译器被编译为可执行文件，而不是作为 library 被引用。它是应用程序的主入口。主包定义为：
package main 让我们在 Go 工作区中创建一个简单的 hello world 示例。
工作区 Go 中的工作空间由环境变量定义，称为 GOPATH。
你的任何代码都将写在工作区内。Go 将搜索GOPATH目录中的任何包，或者GOROOT在安装 Go 时默认设置的目录。注：GOROOT 是安装 go 的路径。
设置GOPATH为所需的目录。现在，让我们将其添加到文件夹中~/workspace。
# 定义GOPATH目录 export GOPATH=~/workspace # 进入工作区目录 cd ~/workspace 在我们刚刚创建的工作区文件夹中创建main.</description>
    </item>
  </channel>
</rss>
